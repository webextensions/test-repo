/* eslint-env node */

/*
    TODO
    ====

    Apply one or more of the following approaches.

    Add check for low disk space (on current partition).
        $ df -k . | tail -1 | tr -s ' ' | cut -d' ' -f4
        https://stackoverflow.com/questions/19703621/get-free-disk-space-with-df-to-just-display-free-space-in-kb/19703644#19703644

        - If the free disk space nears a threshold
            - Show low disk space warning
        - If the free disk space crosses danger level threshold
            - Show a severe warning to the user
            - Stop using the node_modules backup feature
            - Automatically clear the oldest node_modules backups which have not been touched/created recently

    If the number of node_modules backups crosses a threshold.
        - Show a warning/info to the user
        - Automatically clear the oldest node_modules backups which have not been touched/created recently
*/

var path = require('path'),
    fs = require('fs');

var semver = require('./utils/3rdparty/semver.js');

var generateStakeholdersHash = require('./utils/generateHashFromStakeholders.js');

var { spawn } = require('./utils/run-command.js');

var lockedVersionsSatisfy = function (intendedDependencies, installedDependencies) {
    var allVersionsSatisfied = Object.keys(intendedDependencies).every(function (key) {
        var intendedDependency = intendedDependencies[key],
            installedDependency = installedDependencies[key];
        if (installedDependency && semver.satisfies(installedDependency.version, intendedDependency)) {
            return true;
        } else {
            return false;
        }
    });
    return allVersionsSatisfied;
};

var arePackageJsonAndPackageLockJsonInSync = function (projectRoot) {
    var packageJson;
    try { packageJson = require(path.resolve(projectRoot, 'package.json')); } catch (e) { /* do nothing */ }

    var packageLockJson;
    try { packageLockJson = require(path.resolve(projectRoot, 'package-lock.json')); } catch (e) { /* do nothing */ }

    if (!packageJson) {
        console.error('Error: package.json is not available or it is invalid');
        process.exit(1);
    }
    if (!packageLockJson) {
        console.error('Error: package-lock.json is not available or it is invalid');
        process.exit(1);
    }

    var flagLockedVersionsInSync =
            lockedVersionsSatisfy(packageJson.dependencies, packageLockJson.dependencies) &&
            lockedVersionsSatisfy(packageJson.devDependencies, packageLockJson.dependencies);

    return flagLockedVersionsInSync;
};

var runNpmInstall = async function (options) {
    var {
        projectRoot,
        archiveFolderWrtProjectRoot
    } = options;

    var spawnWrtProjectRoot = async function (app, params) {
        var cwd = projectRoot,
            exitCode = await spawn(app, params, { cwd });
        console.log('Exit code: ' + exitCode);
        return exitCode;
    };

    var backupNodeModulesIfRequired = async function (nodeModulesBackupFilePath) {
        if (!fs.existsSync(nodeModulesBackupFilePath)) {
            // https://stackoverflow.com/questions/38273253/using-two-commands-using-pipe-with-spawn/38273497#38273497
            await spawnWrtProjectRoot('sh', ['-c', 'tar cf - node_modules | gzip -6 - > ' + nodeModulesBackupFilePath]);
        }
    };
    
    var restoreNodeModulesFromBackup = async function (nodeModulesBackupFilePath, archiveFolderWrtProjectRoot) {
        var directoryName = path.basename(nodeModulesBackupFilePath).split('.tar.gz')[0],
            directoryPathWrtProjectRoot = archiveFolderWrtProjectRoot + '/' + directoryName;
    
        // https://stackoverflow.com/questions/38273253/using-two-commands-using-pipe-with-spawn/38273497#38273497
        await spawnWrtProjectRoot('sh', ['-c', 'mkdir -p ' + directoryPathWrtProjectRoot]);
        await spawnWrtProjectRoot('sh', ['-c', 'tar -xzf ' + nodeModulesBackupFilePath + ' --directory ' + directoryPathWrtProjectRoot]);
        await spawnWrtProjectRoot('sh', ['-c', 'rm -rf node_modules']);
        await spawnWrtProjectRoot('sh', ['-c', 'mv ' + directoryPathWrtProjectRoot + '/node_modules ./']);
        await spawnWrtProjectRoot('sh', ['-c', 'rm -rf ' + directoryPathWrtProjectRoot]);
    };    

    var fileExistsRelativeToProjectRoot = function (file) {
        var resolvedPath = path.resolve(projectRoot, file);
        return fs.existsSync(resolvedPath);
    };

    var stakeholdersHash = await generateStakeholdersHash({projectRoot}),
        nodeModulesBackupFilePath = path.resolve(projectRoot, archiveFolderWrtProjectRoot, 'node_modules-' + stakeholdersHash + '.tar.gz');
    var errorOccurred = false,
        warningOccurred = false;

    if (!arePackageJsonAndPackageLockJsonInSync(projectRoot)) {
        warningOccurred = true;
        console.warn('\nWarning: Your package-lock.json is out of sync with package.json\n');
    }

    if (fs.existsSync(nodeModulesBackupFilePath)) {
        await restoreNodeModulesFromBackup(nodeModulesBackupFilePath, archiveFolderWrtProjectRoot);
    } else {
        let exitCode;
        if (fileExistsRelativeToProjectRoot('package-lock.json')) {
            if (arePackageJsonAndPackageLockJsonInSync(projectRoot)) {
                exitCode = await spawnWrtProjectRoot('npm', ['ci']);
                if (exitCode !== 0) {
                    exitCode = await spawnWrtProjectRoot('npm', ['install', '--no-package-lock']);
                }
            } else {
                exitCode = await spawnWrtProjectRoot('npm', ['install', '--no-package-lock']);
                if (exitCode !== 0) {
                    exitCode = await spawnWrtProjectRoot('npm', ['ci']);
                }
            }
        } else {
            exitCode = await spawnWrtProjectRoot('npm', ['install', '--no-package-lock']);
        }

        if (exitCode === 0) {
            await backupNodeModulesIfRequired(nodeModulesBackupFilePath);
        } else {
            errorOccurred = true;
            console.log('Error in npm installation.');
        }
    }

    console.log('');
    if (warningOccurred) {
        console.log(' ? Please note the warning(s) mentioned above.');
    }
    if (errorOccurred) {
        console.log(' ✗ Failure\n');
        process.exit(1);
    } else {
        console.log(' ✓ Success\n');
    }
};

module.exports = runNpmInstall;
