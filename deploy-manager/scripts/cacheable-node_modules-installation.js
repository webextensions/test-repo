#!/usr/bin/env node

var path = require('path'),
    fs = require('fs');

var semver = require('./utils/semver.js');

var {
    spawn,
    exec,
    awaitableExec
} = require('./utils/run-command.js');

var restoreNodeModulesFromBackupWithHash = function () {
    spawn('Extract files from tar.gz');
};

var fileExistsRelativeToProjectRoot = function (file) {
    var resolvedPath = path.resolve(__dirname, '..', '..', file);
    return fs.existsSync(resolvedPath);
};

var lockedVersionsVerify = function (intendedDependencies, installedDependencies) {
    var allVersionsSatisfied = Object.keys(intendedDependencies).every(function (key) {
        var intendedDependency = intendedDependencies[key],
            installedDependency = installedDependencies[key];
        if (installedDependency && semver.satisfies(installedDependency.version, intendedDependency)) {
            return true;
        } else {
            return false;
        }
    });
    return allVersionsSatisfied;
};

var arePackageJsonAndPackageLockJsonInSync = function () {
    var packageJson;
    try { packageJson = require('../../package.json'); } catch (e) { /* do nothing */ }

    var packageLockJson;
    try { packageLockJson = require('../../package-lock.json'); } catch (e) { /* do nothing */ }

    if (!packageJson) {
        logger.fatal('Error: package.json is not available or it is invalid');
        process.exit(1);
    }
    if (!packageLockJson) {
        logger.fatal('Error: package-lock.json is not available or it is invalid');
        process.exit(1);
    }

    var flagLockedVersionsInSync =
            lockedVersionsVerify(packageJson.dependencies, packageLockJson.dependencies) &&
            lockedVersionsVerify(packageJson.devDependencies, packageLockJson.dependencies);

    return flagLockedVersionsInSync;
};

var backupNodeModulesIfRequired = async function (nodeModulesBackupFilePath) {
    if (fs.existsSync(nodeModulesBackupFilePath)) {
        // do nothing
    } else {
        // https://stackoverflow.com/questions/38273253/using-two-commands-using-pipe-with-spawn/38273497#38273497
        await spawnWrtProjectRoot(
            'sh',
            [
                '-c',
                'tar cf - node_modules | gzip -6 - > ' + nodeModulesBackupFilePath
            ]
        );
    }
};

var restoreNode_ModulesFromBackup = async function (nodeModulesBackupFilePath) {
    var directoryName = path.basename(nodeModulesBackupFilePath).split('.tar.gz')[0];
    // https://stackoverflow.com/questions/38273253/using-two-commands-using-pipe-with-spawn/38273497#38273497
    await spawnWrtProjectRoot('sh', ['-c', 'mkdir -p node_modules-archived/' + directoryName]);
    await spawnWrtProjectRoot('sh', ['-c', 'tar -xzf ' + nodeModulesBackupFilePath + ' --directory node_modules-archived/' + directoryName]);
    await spawnWrtProjectRoot('sh', ['-c', 'rm -rf node_modules']);
    await spawnWrtProjectRoot('sh', ['-c', 'mv node_modules-archived/' + directoryName + '/node_modules ./']);
    await spawnWrtProjectRoot('sh', ['-c', 'rm -rf node_modules-archived/' + directoryName]);
};

var spawnWrtProjectRoot = async function (app, params) {
    var exitCode = await spawn(app, params, {});
    console.log('Exit code: ' + exitCode);
};

var generateStakeholdersHash = require('./cacheable-node_modules-installation/generateHashFromStakeholders.js');
var main = async function () {
    debugger;
    var stakeholdersHash = await generateStakeholdersHash();
    var nodeModulesBackupFilePath = path.resolve(__dirname, '..', '..', 'node_modules-archived', 'node_modules_' + stakeholdersHash + '.tar.gz');

    if (fs.existsSync(nodeModulesBackupFilePath)) {
        await restoreNode_ModulesFromBackup(nodeModulesBackupFilePath);
    } else {
        if (fileExistsRelativeToProjectRoot('package-lock.json')) {
            if (arePackageJsonAndPackageLockJsonInSync()) {
                try {
                    await spawnWrtProjectRoot('npm', ['ci']);
                    await backupNodeModulesIfRequired(nodeModulesBackupFilePath);
                } catch (e) {
                    await spawnWrtProjectRoot('npm', ['install', '--no-package-lock']);
                    await backupNodeModulesIfRequired(nodeModulesBackupFilePath);
                }
            } else {
                console.warn('Warning: Your package-lock.json is out of sync with package.json');
                try {
                    await spawnWrtProjectRoot('npm', ['install', '--no-package-lock']);
                    await backupNodeModulesIfRequired(nodeModulesBackupFilePath);
                } catch (e) {
                    await spawnWrtProjectRoot('npm', ['ci']);
                    await backupNodeModulesIfRequired(nodeModulesBackupFilePath);
                }
            }
        } else {
            await spawnWrtProjectRoot('npm', ['install', '--no-package-lock']);
            await backupNodeModulesIfRequired(nodeModulesBackupFilePath);
        }
    }

    console.log('\n\nDONE\n');
};
main();

/*
STAKEHOLDERS_HASH=$(node ./cacheable-node_modules-installation/generateHashFromStakeholders.js)

# cd to the project's root folder
cd ../..

if [ ! -f "node_modules-archived/"$STAKEHOLDERS_HASH".tar.gz" ]; then
    echo "File does not exist."
else
    echo "File already exists."
fi

# tar cf - node_modules | gzip -6 - > node_modules-archived/files6.tar.gz


# use-node_modules-archive-or-npm-ci-or-npm-install-no-package-lock


# var hash = generateHash('.nvmrc', 'package.json', 'package-lock.json');

# if (backupWithHashExists(hash)) {
#     restoreNode_ModulesFromBackup(hash);
# } else {
#     if (exists("package-lock.json")) {
#         if (inSync('package-lock.json', 'package.json')) {
#             try {
#                 run("npm ci");
#                 backupNodeModulesIfRequired('node_modules');
#             } catch (e) {
#                 run("npm install --no-package-lock");
#                 backupNodeModulesIfRequired('node_modules');
#             }
#         } else {
#             console.warn('Warning: Your package-lock.json is out of sync with package.json');
#             try {
#                 run("npm install --no-package-lock");
#                 backupNodeModulesIfRequired('node_modules');
#             } catch (e) {
#                 run("npm ci");
#                 backupNodeModulesIfRequired('node_modules');
#             }
#         }
#     } else {
#         run("npm install --no-package-lock");
#         backupNodeModulesIfRequired('node_modules');
#     }
# }

/* */