#!/usr/bin/env node

// #!/bin/bash

// # cd to the folder containing this script
// cd "$(dirname "$0")"

var path = require('path'),
    fs = require('fs');

var semver = require('./utils/semver.js');

var {
    spawn,
    exec,
    awaitableExec
} = require('./utils/run-command.js');

var doesNodeModulesBackupWithHashExist = function (hash) {
    var flag = false;
    return flag;
};

var restoreNodeModulesFromBackupWithHash = function () {
    spawn('Extract files from tar.gz');
};

var fileExistsRelativeToProjectRoot = function (file) {
    var resolvedPath = path.resolve(__dirname, '..', '..', file);
    return fs.existsSync(resolvedPath);
};

var verifyVersions = function (intendedDependencies, installedDependencies) {
    semver;
    semver;
    
    semver;

    Object.keys(intendedDependencies).forEach(function (key) {
        semver;
        semver;
        console.log(key);
        console.log(intendedDependencies[key]);
        console.log(installedDependencies[key]);
        debugger;
    });
    debugger;
};

var arePackageJsonAndPackageLockJsonInSync = function () {
    var packageJson;
    try { packageJson = require('../../package.json'); } catch (e) { /* do nothing */ }

    var packageLockJson;
    try { packageLockJson = require('../../package-lock.json'); } catch (e) { /* do nothing */ }

    if (!packageJson) {
        logger.fatal('Error: package.json is not available or it is invalid');
        process.exit(1);
    }
    if (!packageLockJson) {
        logger.fatal('Error: package-lock.json is not available or it is invalid');
        process.exit(1);
    }

    var flagInSync = true;
    flagInSync = flagInSync && verifyVersions(packageJson.dependencies, packageLockJson.dependencies);
    flagInSync = flagInSync && verifyVersions(packageJson.devDependencies, packageLockJson.dependencies);
    console.log(flagInSync);
    // console.log(999);
    // process.exit(1);

    return flagInSync;
};

var backupNodeModulesIfRequired = async function () {

};

var spawnWrtProjectRoot = async function (app, params) {
    var exitCode = await spawn(app, params, {});
    console.log('Exit code: ' + exitCode);
};

var generateStakeholdersHash = require('./cacheable-node_modules-installation/generateHashFromStakeholders.js');
var main = async function () {
    var stakeholdersHash = await generateStakeholdersHash();

    if (doesNodeModulesBackupWithHashExist(stakeholdersHash)) {
        restoreNode_ModulesFromBackup(hash);
    } else {
        if (fileExistsRelativeToProjectRoot('package-lock.json')) {
            if (arePackageJsonAndPackageLockJsonInSync()) {
                try {
                    asdasd();
                    await spawnWrtProjectRoot('npm', ['ci']);
                    await backupNodeModulesIfRequired();
                } catch (e) {
                    await spawnWrtProjectRoot('npm', ['install', '--no-package-lock']);
                    await backupNodeModulesIfRequired();
                }
            } else {
                console.warn('Warning: Your package-lock.json is out of sync with package.json');
                try {
                    await spawnWrtProjectRoot('npm', ['install', '--no-package-lock']);
                    await backupNodeModulesIfRequired();
                } catch (e) {
                    await spawnWrtProjectRoot('npm', ['ci']);
                    await backupNodeModulesIfRequired();
                }
            }
        } else {
            // console.log(77);
            await spawnWrtProjectRoot('npm', ['install', '--no-package-lock']);
            await backupNodeModulesIfRequired();
        }
    }

    console.log('\n\nDONE\n');
};
main();

/*
STAKEHOLDERS_HASH=$(node ./cacheable-node_modules-installation/generateHashFromStakeholders.js)

# cd to the project's root folder
cd ../..

if [ ! -f "node_modules-archived/"$STAKEHOLDERS_HASH".tar.gz" ]; then
    echo "File does not exist."
else
    echo "File already exists."
fi

# tar cf - node_modules | gzip -6 - > node_modules-archived/files6.tar.gz


# use-node_modules-archive-or-npm-ci-or-npm-install-no-package-lock


# var hash = generateHash('.nvmrc', 'package.json', 'package-lock.json');

# if (backupWithHashExists(hash)) {
#     restoreNode_ModulesFromBackup(hash);
# } else {
#     if (exists("package-lock.json")) {
#         if (inSync('package-lock.json', 'package.json')) {
#             try {
#                 run("npm ci");
#                 backupNodeModulesIfRequired('node_modules');
#             } catch (e) {
#                 run("npm install --no-package-lock");
#                 backupNodeModulesIfRequired('node_modules');
#             }
#         } else {
#             console.warn('Warning: Your package-lock.json is out of sync with package.json');
#             try {
#                 run("npm install --no-package-lock");
#                 backupNodeModulesIfRequired('node_modules');
#             } catch (e) {
#                 run("npm ci");
#                 backupNodeModulesIfRequired('node_modules');
#             }
#         }
#     } else {
#         run("npm install --no-package-lock");
#         backupNodeModulesIfRequired('node_modules');
#     }
# }

/* */